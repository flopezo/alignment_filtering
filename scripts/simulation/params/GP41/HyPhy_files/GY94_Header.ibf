_Genetic_Code = {
                     {14,13,14,13,7,7,7,7,19, 5,19, 5,2,2,3,2,
                      12,11,12,11,6,6,6,6,19,19,19,19,1,1,1,1,
                      16,15,16,15,8,8,8,8,20,20,20,20,4,4,4,4,
                      10,9, 10,9, 5,5,5,5,10,17,18,17,1,0,1,0}
                };
Codon_Index = {
				{14,13,14,13, 7, 7, 7, 7,19, 5,19, 5, 2, 2, 3, 2,
				 12,11,12,11, 6, 6, 6, 6,19,19,19,19, 1, 1, 1, 1,
				 16,15,16,15, 8, 8, 8, 8,20,20,20,20, 4, 4, 4, 4,
				     9,    9, 5, 5, 5, 5,   17,18,17, 1, 0, 1, 0}
			}; 

Codon_Index_ENG = {

				{"AAA","AAC","AAG","AAT","ACA","ACC","ACG","ACT","AGA","AGC","AGG","AGT","ATA","ATC","ATG","ATT",
				  "CAA","CAC","CAG","CAT","CCA","CCC","CCG","CCT","CGA","CGC","CGG","CGT","CTA","CTC","CTG","CTT",
				 "GAA","GAC","GAG","GAT","GCA","GCC","GCG","GCT","GGA","GGC","GGG","GGT","GTA","GTC","GTG","GTT",
				 "TAC",      "TAT","TCA","TCC","TCG","TCT",      "TGC","TGG","TGT","TTA","TTC","TTG","TTT"}
           	   };



/* -------------------------------------------------------------------------- */
/* Builds a vector of codon frequencies by multiplying observed frequencies   */
/* -------------------------------------------------------------------------- */

function BuildCodonFrequencies (obsF)
{
        PIStop = 1.0;
        result = {61,1};
        hshift = 0;

        for (h=0; h<64; h=h+1)
        {
                first = h$16;
                second = h%16$4;
                third = h%4;
                if (_Genetic_Code[h]==10) 
                {
                        hshift = hshift+1;
                        PIStop = PIStop+obsF[first][0]*obsF[second][1]*obsF[third][2];
                        continue; 
                }
                result[h-hshift][0]=obsF[first][0]*obsF[second][1]*obsF[third][2];
                
        }
        return result*(1.0/(PIStop))
        
}

/* -------------------------------------------------------------------------- */
/* Modified version of BuildCodonFrequencies used for one large matrix        */
/* -------------------------------------------------------------------------- */

function BuildCodonFrequenciesBins (obsF, bins)
{
	PIStop = 1.0;
	result = {61*bins,1};
	hshift = 0;
	for (b=0; b<bins; b=b+1)
	{
		for (h=0; h<64; h=h+1)
		{
			first = h$16;
			second = h%16$4;
			third = h%4;
			if (_Genetic_Code[h]==10) 
			{
				hshift = hshift+1;
				PIStop = PIStop-obsF[first][0]*obsF[second][1]*obsF[third][2];
				continue; 
			}
			result[(64*b)+(h-hshift)][0]=(obsF[first][0]*obsF[second][1]*obsF[third][2])/bins;
		}
	}
		
	return result*(1.0/PIStop);      
}


function calcTotalTime(frequency_vector, rate_matrix, species, bins)
{
	Codon_Index = {
			    {
					14,13,14,13,7,7,7,7,19,5,19,5,2,2,3,2,12,11,12,11,6,6,6,6,19,19,19,19,1,1,1,1,
					16,15,16,15,8,8,8,8,20,20,20,20,4,4,4,4,9,9,5,5,5,5,17,18,17,1,0,1,0
					     
			     }
				};
					
	Codon_Index_ENG = {

		{"AAA","AAC","AAG","AAT","ACA","ACC","ACG","ACT","AGA","AGC","AGG","AGT","ATA","ATC","ATG","ATT",
		 "CAA","CAC","CAG","CAT","CCA","CCC","CCG","CCT","CGA","CGC","CGG","CGT","CTA","CTC","CTG","CTT",
		 "GAA","GAC","GAG","GAT","GCA","GCC","GCG","GCT","GGA","GGC","GGG","GGT","GTA","GTC","GTG","GTT",
		       "TAC",      "TAT","TCA","TCC","TCG","TCT",      "TGC","TGG","TGT","TTA","TTC","TTG","TTT"}

				   };				
					
					
	n = 61*bins;
	sum_diag = 0.0;
	sum_all = 0.0;
	sum_syn = 0.0;
	
	for (i=0; i<n; i=i+1)
	{
		for (j=0; j<n; j=j+1)
		{
			if (i == j && i < 61*bins && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1) )
			{	
				sum_diag = sum_diag + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);
				continue;
			}
			else
			{
				if(i != j)
				{	
					codon_i = Codon_Index[i/bins];
					codon_j = Codon_Index[j/bins];
					sum_all =  sum_all + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);
					/*fprintf(stdout,i," ",j," ",frequency_vector[i],"\t\t",rate_matrix[i][j],"\t\t",(frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]),"\t\t",sum_all,"\n");*/
					if (codon_i == codon_j && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1))
					{	
						sum_syn = sum_syn + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);
					}
						
				
				}
			}
		}
	}
	

	if (sum_all != 0)
	{
		rho_ns = (sum_all - sum_syn) / sum_all;
		rho_syn = sum_syn / sum_all;
	}
	else
	{
		rho_ns = 0;
		rho_syn = 0;
	}


	t = sum_all/(species*bins);

	fprintf(stdout,"\n");
	fprintf(stdout,"Total time:\t",t,"\n");
	fprintf(stdout,"Total sum_diag:\t",sum_diag,"\n");
	fprintf(stdout,"Total sum_all:\t",sum_all,"\n");
	fprintf(stdout,"Total sum_syn:\t",sum_syn,"\n");
	fprintf(stdout,"Total rho_ns:\t",rho_ns,"\n");
	fprintf(stdout,"Total rho_syn:\t",rho_syn,"\n\n");

	return {{ rho_ns, rho_syn, t }};

	
}

/*
	A HYPHY translation of a Python function written by Tong Zhou to calculate the proportions
	of synonymous and nonsynonymous mutations, or rho.  Takes as parameters a 61 x 1 frequency vector,
	a 61 x 61 rate matrix, and the number of species in the alignment.  Returns the proportion of 
	nonsynonymous mutations, the proportion of synonymous mutations, and the sum of all the mutations
	divided by the number of species, which is equal to the *true* t (without the constant that is "implied" in the other t) parameter.  Function must be placed after
	optimization in the script.  To calculate dN or dS, the function must be called twice: once where the
	selection on the protein has been estimated and once where selection on the protein has been fixed.
*/

function calcRhoRateBins(frequency_vector, rate_matrix, species, bins)
{
	Codon_Index = {
			    {
					14,13,14,13,7,7,7,7,19,5,19,5,2,2,3,2,12,11,12,11,6,6,6,6,19,19,19,19,1,1,1,1,
					16,15,16,15,8,8,8,8,20,20,20,20,4,4,4,4,9,9,5,5,5,5,17,18,17,1,0,1,0
					     
			     }
				};
					
	Codon_Index_ENG = {

		{"AAA","AAC","AAG","AAT","ACA","ACC","ACG","ACT","AGA","AGC","AGG","AGT","ATA","ATC","ATG","ATT",
		 "CAA","CAC","CAG","CAT","CCA","CCC","CCG","CCT","CGA","CGC","CGG","CGT","CTA","CTC","CTG","CTT",
		 "GAA","GAC","GAG","GAT","GCA","GCC","GCG","GCT","GGA","GGC","GGG","GGT","GTA","GTC","GTG","GTT",
		       "TAC",      "TAT","TCA","TCC","TCG","TCT",      "TGC","TGG","TGT","TTA","TTC","TTG","TTT"}

				   };				
					
					
	n = 61*bins;
	sum_diag = 0.0;
	sum_all = 0.0;
	sum_syn = 0.0;
	
	for (i=0; i<n; i=i+1)
	{
		for (j=0; j<n; j=j+1)
		{
			if (i == j && i < 61*bins && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1) )
			{	
				sum_diag = sum_diag + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);
				continue;
			}
			else
			{	
				codon_i = Codon_Index[i/bins];
				codon_j = Codon_Index[j/bins];
				sum_all =  sum_all + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);

				if (codon_i == codon_j && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1))
				{	
					sum_syn = sum_syn + (frequency_vector[i] * rate_matrix[i][j] * frequency_vector[j]);
				}
						
				
			}
		}
	}
	

	if (sum_all != 0)
	{
		rho_ns = (sum_all - sum_syn) / sum_all;
		rho_syn = sum_syn / sum_all;
	}
	else
	{
		rho_ns = 0;
		rho_syn = 0;
	}



	t = sum_all/species;
	  
	return {{ rho_ns, rho_syn, t }};

	
}

/*
	A HYPHY translation of a Python function written by Tong Zhou to calculate the proportions
	of synonymous and nonsynonymous mutations, or rho.  Takes as parameters a 61 x 1 frequency vector,
	a 61 x 61 rate matrix, and the number of species in the alignment.  Returns the proportion of 
	nonsynonymous mutations, the proportion of synonymous mutations, and the sum of all the mutations
	divided by the number of species, which is equal to the t parameter.  Function must be placed after
	optimization in the script.  To calculate dN or dS, the function must be called twice: once where the
	selection on the protein has been estimated and once where selection on the protein has been fixed.
*/

function calcRhoRateBinsPrime(frequency_vector, prime_vector, tt, rate_matrix, species, bins)
{
	Codon_Index = {
			    {
					14,13,14,13,7,7,7,7,19,5,19,5,2,2,3,2,12,11,12,11,6,6,6,6,19,19,19,19,1,1,1,1,
					16,15,16,15,8,8,8,8,20,20,20,20,4,4,4,4,9,9,5,5,5,5,17,18,17,1,0,1,0
					     
			     }
				};
					
	Codon_Index_ENG = {

		{"AAA","AAC","AAG","AAT","ACA","ACC","ACG","ACT","AGA","AGC","AGG","AGT","ATA","ATC","ATG","ATT",
		 "CAA","CAC","CAG","CAT","CCA","CCC","CCG","CCT","CGA","CGC","CGG","CGT","CTA","CTC","CTG","CTT",
		 "GAA","GAC","GAG","GAT","GCA","GCC","GCG","GCT","GGA","GGC","GGG","GGT","GTA","GTC","GTG","GTT",
		       "TAC",      "TAT","TCA","TCC","TCG","TCT",      "TGC","TGG","TGT","TTA","TTC","TTG","TTT"}

				   };				
					
					
	n = 61*bins;
	sum_diag = 0.0;
	sum_all = 0.0;
	sum_syn = 0.0;
	
	for (i=0; i<n; i=i+1)
	{
		for (j=0; j<n; j=j+1)
		{
			if (i == j && i < 61*bins && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1) )
			{	
				sum_diag = sum_diag + (frequency_vector[i] * rate_matrix[i][j] * prime_vector[j]);
				continue;
			}
			else
			{	
				codon_i = Codon_Index[i/bins];
				codon_j = Codon_Index[j/bins];
				sum_all =  sum_all + (frequency_vector[i] * rate_matrix[i][j] * prime_vector[j]);
				if (codon_i == codon_j && j < 61*bins && i >= 61*(bins-1) && j >= 61*(bins-1))
				{	
					sum_syn = sum_syn + (frequency_vector[i] * rate_matrix[i][j] * prime_vector[j]);
				}
						
				
			}
		}
	}
	

	if (sum_all != 0)
	{
		rho_ns = (sum_all - sum_syn) / sum_all;
		rho_syn = sum_syn / sum_all;
	}
	else
	{
		rho_ns = 0;
		rho_syn = 0;
	}



	t = sum_all/species;	

	fprintf(stdout,t,"\t",sum_diag,"\t",sum_all,"\t",sum_syn,"\t",rho_ns,"\t",rho_syn,"\n");
	return {{ rho_ns, rho_syn, t }};

	
}


function exciseMatrix(rate_matrix, bins)
{
	n = 61;
	result = {61,61};
	low = (61*bins)-61;
	high = (61*bins)-1;
	x = 0;
	y = -1;
	
	for (i=0; i<61*bins; i=i+1)
	{
		for (j=0; j< 61*bins; j=j+1)
		{
			if(i>=low && j>=low && i<=high && j<= high)
			{
				y = y+1;

				result[x][y] = rate_matrix[i][j];
				if (y == 60){ x=x+1;y=-1; }
				
			}
		}
	}
	return result;
}
 
/* -------------------------------------------------------------------------- */
/* Creates a list of stop codons and nonsense entries based on # of bins      */
/* -------------------------------------------------------------------------- */
function BadEntries (no_bins)
{
	IDS = {{"A","C","G","T","D","E","F","H","I","K","L","M","N","P","Q","R","S","V","W","Y"}};
	BAD = {{"D","E","F","H","I","K","L","M","N","P","Q","R","S","V","W","Y"}};
	
	list = "";

	for(a=0; a<no_bins; a=a+1)
	{
		for(b=0; b<no_bins; b=b+1)
		{
			for(c=0;c<no_bins; c=c+1)
			{
				for(d=0;d<no_bins; d=d+1)
				{
					for(x=0; x<16; x=x+1)
					{
						if(IDS[b] == BAD[x] || IDS[c] == BAD[x] || IDS[d] == BAD[x])
						{
							list = list + IDS[a] + IDS[b] + IDS[c] + IDS[d] + ",";
							break;
						}
					}
				}
			}
		}
	}
	
	for(s=0; s<no_bins; s=s+1)
	{
		list = list + IDS[s] + "TGA," + IDS[s] + "TAA," + IDS[s] + "TAG";
		if(s != no_bins-1)
		{
			list = list + ",";
		}
	}
	
	return list;
}


/* ---------------------------------------*/
/* Translates a codon to its amino acid   */
/* ---------------------------------------*/
function TranslateCodon(codon)
{
	aa = -1;
	for(c=0; c<61; c=c+1)
	{
		if (codon == Codon_Index_ENG[c])
		{
			aa = Codon_Index[c];
		}
	}
	
	return aa;

}

/* -------------------------------------------------------------------------- */
/* Returns the codon synonymous and nonsynonymous counts for physical sites   */
/* -------------------------------------------------------------------------- */
function getCodonSynSiteNum (codon)
{
	base_list = {{ "A","C","G","T" }};
	amino = TranslateCodon(codon);   
	ns = 0;
	total = 9;
	
	for(i=0; i<4; i=i+1)
	{
		/* FIRST POSITION */
		if (base_list[i] != codon[0])
		{
			new_codon = base_list[i] + codon[1] + codon[2];
			
			if(TranslateCodon(new_codon) == (-1))
			{
				total = total -1;
			}
			
			if (TranslateCodon(new_codon) == amino)
			{
				ns = ns + 1;
			}
		}
		
		/* SECOND POSITION */
		if (base_list[i] != codon[1])
		{
			new_codon = codon[0] + base_list[i] + codon[2];
			
			if(TranslateCodon(new_codon) == (-1))
			{
				total = total -1;
			}
			if (TranslateCodon(new_codon) == amino)
			{
				ns = ns + 1;
			}
		}
		
		/* THIRD POSITION */
		if (base_list[i] != codon[2])
		{
			new_codon = codon[0] + codon[1] + base_list[i];
			
			if(TranslateCodon(new_codon) == (-1))
			{
				total = total -1;
			}
			if (TranslateCodon(new_codon) == amino)
			{
				ns = ns + 1;
			}
		}
	}

	ns = ns / 3;
	nn = total/3 - ns;
	return {{nn*(3/(nn+ns)), ns*(3/(nn+ns))}};


}

/*----------------------------------------------------------------------*/
/* Builds Synonymous and Nonsynonymous count vectors for physical sites */
/*----------------------------------------------------------------------*/

SynCount = {61,1};
NonSynCount = {61,1};

for (z=0; z <61; z = z+1)
{
	result = getCodonSynSiteNum(Codon_Index_ENG[z]);
	
	SynCount[z] = result[1];
	NonSynCount[z] = result[0];
	
}

/*-------------------------------------------------------------------------------------------------*/
/* Averages the numbers of synonymous and nonsynonymous sites per codon over the codon frequencies */
/*-------------------------------------------------------------------------------------------------*/

function avgVector(vec1,vec2)
{
	total = 0;
	
	for(b=0; b < 61; b = b+1)
	{
		total = total + (vec1[b]*vec2[b]);
	}
	
	return total;

}

/*This Function generates the categorical frequencies. You just need to pass resp and the name of your variable*/

function BuildCategory (resp , catName)
{
        gdDefString = "";

        if( resp != 1 ) {
          for (mi=1; mi<resp; mi=mi+1)
          {
            gdDefString*("global "+catName+"_p"+mi+" = 1/"+((resp+1)-mi)+";\n"+catName+"_p"+mi+":<1;\n");
          }
        }
        if( resp == 1 ) {
          gdDefString*("\n\nglobal "+catName+" = 1;\n"+catName+":<100000;"+catName+":>0.000000001;\n");
          fprintf(stdout,gdDefString,"\n");
          ExecuteCommands (gdDefString);
          return 0;
        }
        else {
          gdDefString*("\n\nglobal "+catName+"_1 = "+10^(2-resp)+";\n");
        }

        for (mi=2; mi<=resp; mi=mi+1) {
                gdDefString*("global "+catName+"_"+mi+" = "+10^(mi-resp)+";\n");
        }

            rateStrMx = {resp,1};

        for (mi=1; mi<=resp; mi=mi+1) {
                rateStrMx[mi-1] = catName+"_"+mi;
        }

            freqStrMx    = {resp,1};
        freqStrMx[0] = catName+"_p1";

        for (mi=1; mi<resp-1; mi=mi+1) {
                freqStrMx[mi] = "";
                for (mi2=1;mi2<=mi;mi2=mi2+1) {
                        freqStrMx[mi] = freqStrMx[mi]+"(1-"+catName+"_p"+mi2+")";
                }
                freqStrMx[mi] = freqStrMx[mi]+""+catName+"_p"+(mi+1);
        }

        freqStrMx[mi] = "";
        for (mi2=1;mi2<mi;mi2=mi2+1) {
                freqStrMx[mi] = freqStrMx[mi]+"(1-"+catName+"_p"+mi2+")";
        }
        freqStrMx[mi] = freqStrMx[mi]+"(1-"+catName+"_p"+mi+")";


        gdDefString*(";\ncategFreqMatrix_"+catName+"={{"+freqStrMx[0]);

        for (mi=1; mi<resp; mi=mi+1) {
                gdDefString*(","+freqStrMx[mi]);
        }

        gdDefString*("}};\ncategRateMatrix_"+catName+"={{"+rateStrMx[0]);

        for (mi=1; mi<resp; mi=mi+1) {
                gdDefString*(","+rateStrMx[mi]);
        }

        gdDefString*("}};\n\ncategory "+catName+"  = ("+resp+", categFreqMatrix_"+catName+" , MEAN, , categRateMatrix_"+catName+", 0, 1e25);\n\n");
        gdDefString*0;
        fprintf(stdout,gdDefString,"\n");
        ExecuteCommands (gdDefString);
        return 0;
}
