import re, os, sys, subprocess, fnmatch, csv, shutil
from numpy import *
from Bio import AlignIO, SeqIO
from parsing_fxns import *


# Weighted algorithms
walgs=['BMweights', 'PDweights', 'BMweightsP', 'PDweightsP']
# Guidance algorithms
galgs=['Guidance', 'GuidanceP']
masks={'30': 'thirty', '50':'fifty', '70':'seventy', '90':'ninety'}
genes=['prk']
pp_cutoff = 0.895 # Posterior probability threshold for calling sites as positively selected or not.

datadir='/Users/sjspielman/Dropbox/aln/results/'
dataset = sys.argv[1]
assert (dataset == 'HA' or dataset == 'GP41'), "Must specify either HA or GP41 as the dataset."
if dataset == 'GP41':
	datadir += 'GP41/'
	posStart = 10
elif dataset == 'HA':
	datadir += 'HA/'
	posStart = 18

outfile='/Users/sjspielman/Research/alignment_filtering/data/parsed_data/revision/TESTINGfubar_'+dataset+'_90.txt'
outhandle=open(outfile, 'w')
outhandle.write('count\ttprate\tfprate\t\tfnrate\taccuracy\tcase\tgene\tmask\tmethod\tpenal\tnum_masked\tave_masked\tperc_masked\tprior\tomega\n')


for gene in genes:

	print gene+'\n'
	
	############ Set up gene-specific data directories ############
	
	# Directories: paml output, alignments (all made with linsi, except for true alignments as generated by Indelible)
	fudir = pamldir = datadir+'fubar/fubar_'+gene+'/'
	alndir  = datadir+'alntree/aaguided_'+gene+'/'
	
	# Directories: true simulated alignments and evolutionary rate categories
	truerates_dir=datadir+'Simulation/truerates/'+gene+'/'
	truealn_dir=datadir+'Simulation/sequences/'+gene+'/'
	
			
	for n in range(10):
		print str(n)
		
		## File names (refaln, truealn, truerates)
		refaln=alndir+'refaln'+str(n)+'.fasta'
		trfile=truerates_dir+'truerates'+str(n)+'.txt'
		truealn=truealn_dir+'truealn_aa'+str(n)+'.fasta'
		
		
		## Read in the reference alignment and collect some relevant info
		handle = open(refaln, 'r')
		refparsed=AlignIO.read(refaln, 'fasta')
		handle.close()
		alnlen=len(refparsed[0])
		numseq=len(refparsed)
		
		## Read in the true alignment
		handle = open(truealn, 'r')
		trueparsed=AlignIO.read(handle, 'fasta')
		handle.close()
		true_alnlen = len(trueparsed[0])
		
		wantRef, wantTrue = singleTaxonMap(trueparsed, trueparsed, numseq, true_alnlen)	
		truepos = parseTrueRates(trfile, wantTrue, posStart)
		
		name = 'truealn'+str(n)+'.fasta'
		fubar = fudir+'fubar/'+name+'.fubar'	
		testprobs = parseFUBAR(wantRef, fubar)	
		assert(len(truepos)==len(testprobs)), "True FUBAR Mapping has failed."
		
		# Grab info on priors
		#prior, omega = getFUBARprior(fudir, name, gridSize)
		prior = 0
		omega = 0
		
		(tp,tn,fp,fn,tprate,fprate,tnrate,fnrate,accuracy) = getAccuracy(pp_cutoff, truepos, testprobs)
		outhandle.write(str(n)+'\t'+str(tprate)+'\t'+str(fprate)+'\t'+str(fnrate)+'\t'+str(accuracy)+'\ttruealn\t'+gene+'\ttrue\tfubar\ttrue\t0\t0\t0\t'+str(prior)+'\t'+str(omega)+'\n')	
		###########################################################################################################

		
outhandle.close()

			
			
			
		
				
			
			
			
			
			
			